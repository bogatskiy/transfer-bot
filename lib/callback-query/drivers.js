'use strict'

const bot = require('../bot')
const mongoose = require('mongoose')
const Trip = mongoose.model('trip')
const User = mongoose.model('user')
const {tripFrom, tripTo} = require('../helpers')

async function driveTripFrom(query) {
  const {id} = query.message.chat
  const {from} = JSON.parse(query.data)
  try {
    const user = await User.findOne({id})
    const trips = await Trip.find({from: from, completed: false})

    await bot.deleteMessage(id, query.message.message_id)

    if (user.isDriver) {
      if (trips.length === 0 || trips.length === 1 && trips[0].id === user.id) {
        await bot.sendMessage(id, `–ü–æ–ø—É—Ç—á–∏–∫–æ–≤ <b>${tripFrom(from)}</b> –Ω–µ—Ç. 

<i>–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ</i> /start`, {parse_mode: 'HTML'})
      }
      else {
        await Promise.all(trips.map(async i => {
          const user = await User.findOne({id: i.id})
          const userInfo = JSON.stringify({
            cb: 'Up',
            _id: i._id.toString()
          })
          if (!user.isDriver) {
            await bot.sendMessage(id, `${user.first_name} –µ–¥–µ—Ç 
<b>${tripFrom(i.from)} ${tripTo(i.to)}</b>`,
              {
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [
                    [{
                      text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç',
                      callback_data: userInfo
                    }],
                    [{
                      text: '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å',
                      callback_data: 'ignore'
                    }]
                  ]
                }
              })
          }
        }))
        await bot.sendMessage(id, `–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start`)
      }
    }
  } catch (e) {
    console.error(e)
  }
}

async function driverPickUp(query) {
  try {

    const {id} = query.message.chat
    await bot.deleteMessage(id, query.message.message_id)
    const callback = JSON.parse(query.data)
    const nowDate = new Date().getTime()

    const trip = await Trip.findOne({_id: callback._id})
    const user = await User.findOne({id})
    const passenger = await User.findOne({id: trip.id})
    const tripDate = new Date(trip.date).getTime()

    if (nowDate - tripDate <= 1800000 && trip.completed === false && passenger.isDriver === false) {
      await bot.sendMessage(trip.id,
        `üöï
–í–æ–¥–∏—Ç–µ–ª—å <b>${user.first_name}</b> –≥–æ—Ç–æ–≤ –í–∞—Å –ø–æ–¥–≤–µ–∑—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.`,
        {parse_mode: 'HTML'})
      await bot.sendContact(trip.id, user.phone_number, user.first_name)
      await bot.answerCallbackQuery(query.id, {text: '–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', show_alert: true})
    } else {
      await bot.answerCallbackQuery(query.id, {text: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞', show_alert: true})
    }
  } catch (e) {
    console.log(e)
  }
}

async function ignorePassenger(query) {
  const {id} = query.message.chat
  await bot.deleteMessage(id, query.message.message_id)
}

module.exports = {
  driveTripFrom,
  driverPickUp,
  ignorePassenger
}